---
apiVersion: v1
items:
- metadata:
    annotations:
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2021-04-26T21:12:16Z"
    generateName: aws-node-
    labels:
      controller-revision-hash: ff9745db6
      k8s-app: aws-node
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1d425a99-b4e6-42d6-b7a9-afae0ef981a4"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"aws-node"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"ADDITIONAL_ENI_TAGS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_CNI_NODE_PORT_SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_ENI_MTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_CONFIGURE_RPFILTER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_EXTERNALSNAT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_LOG_FILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_LOGLEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_RANDOMIZESNAT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_VETHPREFIX"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_PLUGIN_LOG_FILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_PLUGIN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DISABLE_INTROSPECTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DISABLE_METRICS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_POD_ENI"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MY_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"WARM_ENI_TARGET"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":61678,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/var/log/aws-routed-eni"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/aws-node"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/dockershim.sock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"aws-vpc-cni-init"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"DISABLE_TCP_EARLY_DEMUX"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dockershim"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"log-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-26T21:12:16Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.20.112"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-04-26T21:12:49Z"
    name: aws-node-976mm
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 1d425a99-b4e6-42d6-b7a9-afae0ef981a4
    resourceVersion: "1697"
    selfLink: /api/v1/namespaces/kube-system/pods/aws-node-976mm
    uid: b2a3b65d-2f6c-4737-a732-0c2aab9e95d2
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-20-112.us-west-2.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CONFIGURE_RPFILTER
        value: "false"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: WARM_ENI_TARGET
        value: "1"
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.7.5-eksbuild.1
      imagePullPolicy: Always
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/dockershim.sock
        name: dockershim
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: aws-node-token-7tmh6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni-init:v1.7.5-eksbuild.1
      imagePullPolicy: Always
      name: aws-vpc-cni-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: aws-node-token-7tmh6
        readOnly: true
    nodeName: ip-192-168-20-112.us-west-2.compute.internal
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/run/dockershim.sock
        type: ""
      name: dockershim
    - hostPath:
        path: /run/xtables.lock
        type: ""
      name: xtables-lock
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - name: aws-node-token-7tmh6
      secret:
        defaultMode: 420
        secretName: aws-node-token-7tmh6
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:36Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://f1e4d4bf2c118b9efc69baee3526c24b54db807f845183c3423f909afef74a38
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.7.5-eksbuild.1
      imageID: docker-pullable://602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni@sha256:f310c918ee2b4ebced76d2d64a2ec128dde3b364d1b495f0ae73011f489d474d
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-04-26T21:12:40Z"
    hostIP: 192.168.20.112
    initContainerStatuses:
    - containerID: docker://3002d4a90c38dc5ee04aaf65151ab2b700a54623f864d4afbde2fa011a35e9ab
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni-init:v1.7.5-eksbuild.1
      imageID: docker-pullable://602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni-init@sha256:d96d712513464de6ce94e422634a25546565418f20d1b28d3bce399d578f3296
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://3002d4a90c38dc5ee04aaf65151ab2b700a54623f864d4afbde2fa011a35e9ab
          exitCode: 0
          finishedAt: "2021-04-26T21:12:35Z"
          reason: Completed
          startedAt: "2021-04-26T21:12:35Z"
    phase: Running
    podIP: 192.168.20.112
    podIPs:
    - ip: 192.168.20.112
    qosClass: Burstable
    startTime: "2021-04-26T21:12:20Z"
- metadata:
    annotations:
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2021-04-26T21:12:12Z"
    generateName: aws-node-
    labels:
      controller-revision-hash: ff9745db6
      k8s-app: aws-node
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"1d425a99-b4e6-42d6-b7a9-afae0ef981a4"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"aws-node"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"ADDITIONAL_ENI_TAGS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_CNI_NODE_PORT_SUPPORT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_ENI_MTU"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_CONFIGURE_RPFILTER"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_EXTERNALSNAT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_LOG_FILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_LOGLEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_RANDOMIZESNAT"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_CNI_VETHPREFIX"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_PLUGIN_LOG_FILE"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"AWS_VPC_K8S_PLUGIN_LOG_LEVEL"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DISABLE_INTROSPECTION"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"DISABLE_METRICS"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"ENABLE_POD_ENI"}:
                  .: {}
                  f:name: {}
                  f:value: {}
                k:{"name":"MY_NODE_NAME"}:
                  .: {}
                  f:name: {}
                  f:valueFrom:
                    .: {}
                    f:fieldRef:
                      .: {}
                      f:apiVersion: {}
                      f:fieldPath: {}
                k:{"name":"WARM_ENI_TARGET"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":61678,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:hostPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:exec:
                  .: {}
                  f:command: {}
                f:failureThreshold: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:capabilities:
                  .: {}
                  f:add: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/etc/cni/net.d"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/host/var/log/aws-routed-eni"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/aws-node"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/run/dockershim.sock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:initContainers:
            .: {}
            k:{"name":"aws-vpc-cni-init"}:
              .: {}
              f:env:
                .: {}
                k:{"name":"DISABLE_TCP_EARLY_DEMUX"}:
                  .: {}
                  f:name: {}
                  f:value: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/host/opt/cni/bin"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"cni-bin-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"cni-net-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"dockershim"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"log-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"run-dir"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-26T21:12:12Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:initContainerStatuses: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.61.111"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-04-26T21:12:41Z"
    name: aws-node-j76wg
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: aws-node
      uid: 1d425a99-b4e6-42d6-b7a9-afae0ef981a4
    resourceVersion: "1667"
    selfLink: /api/v1/namespaces/kube-system/pods/aws-node-j76wg
    uid: fc2b73d0-b936-420c-a09c-63664678d06b
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-61-111.us-west-2.compute.internal
    containers:
    - env:
      - name: ADDITIONAL_ENI_TAGS
        value: '{}'
      - name: AWS_VPC_CNI_NODE_PORT_SUPPORT
        value: "true"
      - name: AWS_VPC_ENI_MTU
        value: "9001"
      - name: AWS_VPC_K8S_CNI_CONFIGURE_RPFILTER
        value: "false"
      - name: AWS_VPC_K8S_CNI_CUSTOM_NETWORK_CFG
        value: "false"
      - name: AWS_VPC_K8S_CNI_EXTERNALSNAT
        value: "false"
      - name: AWS_VPC_K8S_CNI_LOGLEVEL
        value: DEBUG
      - name: AWS_VPC_K8S_CNI_LOG_FILE
        value: /host/var/log/aws-routed-eni/ipamd.log
      - name: AWS_VPC_K8S_CNI_RANDOMIZESNAT
        value: prng
      - name: AWS_VPC_K8S_CNI_VETHPREFIX
        value: eni
      - name: AWS_VPC_K8S_PLUGIN_LOG_FILE
        value: /var/log/aws-routed-eni/plugin.log
      - name: AWS_VPC_K8S_PLUGIN_LOG_LEVEL
        value: DEBUG
      - name: DISABLE_INTROSPECTION
        value: "false"
      - name: DISABLE_METRICS
        value: "false"
      - name: ENABLE_POD_ENI
        value: "false"
      - name: MY_NODE_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: spec.nodeName
      - name: WARM_ENI_TARGET
        value: "1"
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.7.5-eksbuild.1
      imagePullPolicy: Always
      livenessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
        failureThreshold: 3
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: aws-node
      ports:
      - containerPort: 61678
        hostPort: 61678
        name: metrics
        protocol: TCP
      readinessProbe:
        exec:
          command:
          - /app/grpc-health-probe
          - -addr=:50051
        failureThreshold: 3
        initialDelaySeconds: 1
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        requests:
          cpu: 10m
      securityContext:
        capabilities:
          add:
          - NET_ADMIN
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /host/etc/cni/net.d
        name: cni-net-dir
      - mountPath: /host/var/log/aws-routed-eni
        name: log-dir
      - mountPath: /var/run/aws-node
        name: run-dir
      - mountPath: /var/run/dockershim.sock
        name: dockershim
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: aws-node-token-7tmh6
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    initContainers:
    - env:
      - name: DISABLE_TCP_EARLY_DEMUX
        value: "false"
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni-init:v1.7.5-eksbuild.1
      imagePullPolicy: Always
      name: aws-vpc-cni-init
      resources: {}
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /host/opt/cni/bin
        name: cni-bin-dir
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: aws-node-token-7tmh6
        readOnly: true
    nodeName: ip-192-168-61-111.us-west-2.compute.internal
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: aws-node
    serviceAccountName: aws-node
    terminationGracePeriodSeconds: 10
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /opt/cni/bin
        type: ""
      name: cni-bin-dir
    - hostPath:
        path: /etc/cni/net.d
        type: ""
      name: cni-net-dir
    - hostPath:
        path: /var/run/dockershim.sock
        type: ""
      name: dockershim
    - hostPath:
        path: /run/xtables.lock
        type: ""
      name: xtables-lock
    - hostPath:
        path: /var/log/aws-routed-eni
        type: DirectoryOrCreate
      name: log-dir
    - hostPath:
        path: /var/run/aws-node
        type: DirectoryOrCreate
      name: run-dir
    - name: aws-node-token-7tmh6
      secret:
        defaultMode: 420
        secretName: aws-node-token-7tmh6
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:30Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:41Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:41Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://ddf532b539488813953f4a170d9d71ae5b6f346e9b424e8f3e4f2dc0ea0e5cb2
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni:v1.7.5-eksbuild.1
      imageID: docker-pullable://602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni@sha256:f310c918ee2b4ebced76d2d64a2ec128dde3b364d1b495f0ae73011f489d474d
      lastState: {}
      name: aws-node
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-04-26T21:12:33Z"
    hostIP: 192.168.61.111
    initContainerStatuses:
    - containerID: docker://5b34c8589fda8cbe1fd90c23d39c9e299419533ec93f5aca350548b1dc95687f
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni-init:v1.7.5-eksbuild.1
      imageID: docker-pullable://602401143452.dkr.ecr.us-west-2.amazonaws.com/amazon-k8s-cni-init@sha256:d96d712513464de6ce94e422634a25546565418f20d1b28d3bce399d578f3296
      lastState: {}
      name: aws-vpc-cni-init
      ready: true
      restartCount: 0
      state:
        terminated:
          containerID: docker://5b34c8589fda8cbe1fd90c23d39c9e299419533ec93f5aca350548b1dc95687f
          exitCode: 0
          finishedAt: "2021-04-26T21:12:29Z"
          reason: Completed
          startedAt: "2021-04-26T21:12:29Z"
    phase: Running
    podIP: 192.168.61.111
    podIPs:
    - ip: 192.168.61.111
    qosClass: Burstable
    startTime: "2021-04-26T21:12:16Z"
- metadata:
    annotations:
      eks.amazonaws.com/compute-type: ec2
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2021-04-26T21:04:34Z"
    generateName: coredns-559b5db75d-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 559b5db75d
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:eks.amazonaws.com/compute-type: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:eks.amazonaws.com/component: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7b45755d-d777-4ab3-8e19-15c5b142f775"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
            f:podAntiAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-26T21:04:34Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      time: "2021-04-26T21:05:12Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.51.191"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-04-26T21:12:58Z"
    name: coredns-559b5db75d-745kw
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-559b5db75d
      uid: 7b45755d-d777-4ab3-8e19-15c5b142f775
    resourceVersion: "1752"
    selfLink: /api/v1/namespaces/kube-system/pods/coredns-559b5db75d-745kw
    uid: 0a5d40a6-61fd-4d10-b976-0ae2607c1313
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: beta.kubernetes.io/os
              operator: In
              values:
              - linux
            - key: beta.kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/coredns:v1.7.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-dhcx6
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-192-168-61-111.us-west-2.compute.internal
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: coredns-token-dhcx6
      secret:
        defaultMode: 420
        secretName: coredns-token-dhcx6
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:58Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:58Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://b391f3c684d972127a1733ba91204c8258bf3b36b67459c837d2a940cdc492d0
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/coredns:v1.7.0-eksbuild.1
      imageID: docker-pullable://602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/coredns@sha256:edffc302f7adb1adc410d45ed2266d83c966bc195995191da63e035111e38afd
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-04-26T21:12:56Z"
    hostIP: 192.168.61.111
    phase: Running
    podIP: 192.168.51.191
    podIPs:
    - ip: 192.168.51.191
    qosClass: Burstable
    startTime: "2021-04-26T21:12:53Z"
- metadata:
    annotations:
      eks.amazonaws.com/compute-type: ec2
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2021-04-26T21:04:34Z"
    generateName: coredns-559b5db75d-
    labels:
      eks.amazonaws.com/component: coredns
      k8s-app: kube-dns
      pod-template-hash: 559b5db75d
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:eks.amazonaws.com/compute-type: {}
          f:generateName: {}
          f:labels:
            .: {}
            f:eks.amazonaws.com/component: {}
            f:k8s-app: {}
            f:pod-template-hash: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"7b45755d-d777-4ab3-8e19-15c5b142f775"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
            f:podAntiAffinity:
              .: {}
              f:preferredDuringSchedulingIgnoredDuringExecution: {}
          f:containers:
            k:{"name":"coredns"}:
              .: {}
              f:args: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:livenessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:initialDelaySeconds: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:name: {}
              f:ports:
                .: {}
                k:{"containerPort":53,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":53,"protocol":"UDP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
                k:{"containerPort":9153,"protocol":"TCP"}:
                  .: {}
                  f:containerPort: {}
                  f:name: {}
                  f:protocol: {}
              f:readinessProbe:
                .: {}
                f:failureThreshold: {}
                f:httpGet:
                  .: {}
                  f:path: {}
                  f:port: {}
                  f:scheme: {}
                f:periodSeconds: {}
                f:successThreshold: {}
                f:timeoutSeconds: {}
              f:resources:
                .: {}
                f:limits:
                  .: {}
                  f:memory: {}
                f:requests:
                  .: {}
                  f:cpu: {}
                  f:memory: {}
              f:securityContext:
                .: {}
                f:allowPrivilegeEscalation: {}
                f:capabilities:
                  .: {}
                  f:add: {}
                  f:drop: {}
                f:readOnlyRootFilesystem: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/etc/coredns"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/tmp"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config-volume"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:items: {}
                f:name: {}
              f:name: {}
            k:{"name":"tmp"}:
              .: {}
              f:emptyDir: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-26T21:04:34Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            .: {}
            k:{"type":"PodScheduled"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:message: {}
              f:reason: {}
              f:status: {}
              f:type: {}
      manager: kube-scheduler
      operation: Update
      time: "2021-04-26T21:05:12Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.32.195"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-04-26T21:12:56Z"
    name: coredns-559b5db75d-hlwg2
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: coredns-559b5db75d
      uid: 7b45755d-d777-4ab3-8e19-15c5b142f775
    resourceVersion: "1740"
    selfLink: /api/v1/namespaces/kube-system/pods/coredns-559b5db75d-hlwg2
    uid: e4fb3825-b82d-4bdf-966a-f16d4bf1e42c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchExpressions:
            - key: beta.kubernetes.io/os
              operator: In
              values:
              - linux
            - key: beta.kubernetes.io/arch
              operator: In
              values:
              - amd64
              - arm64
      podAntiAffinity:
        preferredDuringSchedulingIgnoredDuringExecution:
        - podAffinityTerm:
            labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - kube-dns
            topologyKey: kubernetes.io/hostname
          weight: 100
    containers:
    - args:
      - -conf
      - /etc/coredns/Corefile
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/coredns:v1.7.0-eksbuild.1
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 5
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        initialDelaySeconds: 60
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: coredns
      ports:
      - containerPort: 53
        name: dns
        protocol: UDP
      - containerPort: 53
        name: dns-tcp
        protocol: TCP
      - containerPort: 9153
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /health
          port: 8080
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources:
        limits:
          memory: 170Mi
        requests:
          cpu: 100m
          memory: 70Mi
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          add:
          - NET_BIND_SERVICE
          drop:
          - all
        readOnlyRootFilesystem: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/coredns
        name: config-volume
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: coredns-token-dhcx6
        readOnly: true
    dnsPolicy: Default
    enableServiceLinks: true
    nodeName: ip-192-168-61-111.us-west-2.compute.internal
    priority: 2000000000
    priorityClassName: system-cluster-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: coredns
    serviceAccountName: coredns
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoSchedule
      key: node-role.kubernetes.io/master
    - key: CriticalAddonsOnly
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - emptyDir: {}
      name: tmp
    - configMap:
        defaultMode: 420
        items:
        - key: Corefile
          path: Corefile
        name: coredns
      name: config-volume
    - name: coredns-token-dhcx6
      secret:
        defaultMode: 420
        secretName: coredns-token-dhcx6
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:53Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:56Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:56Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:53Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://0e6c240a8c51dcb2c14df57f56c15ff5f536f8e86099e3a839a3d3199bd96785
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/coredns:v1.7.0-eksbuild.1
      imageID: docker-pullable://602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/coredns@sha256:edffc302f7adb1adc410d45ed2266d83c966bc195995191da63e035111e38afd
      lastState: {}
      name: coredns
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-04-26T21:12:56Z"
    hostIP: 192.168.61.111
    phase: Running
    podIP: 192.168.32.195
    podIPs:
    - ip: 192.168.32.195
    qosClass: Burstable
    startTime: "2021-04-26T21:12:53Z"
- metadata:
    annotations:
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2021-04-26T21:12:16Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 679dd5bcff
      k8s-app: kube-proxy
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"75919d99-7581-49ba-aa01-1827d0c57f69"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"varlog"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-26T21:12:16Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.20.112"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-04-26T21:12:28Z"
    name: kube-proxy-56gkq
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 75919d99-7581-49ba-aa01-1827d0c57f69
    resourceVersion: "1612"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-56gkq
    uid: 2f79a701-2e7e-4f0d-a73f-03b8ac76665c
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-20-112.us-west-2.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy:v1.18.8-eksbuild.1
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-cclcv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-20-112.us-west-2.compute.internal
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-proxy-token-cclcv
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-cclcv
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:20Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:16Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://c683579131937f96a01ab5ad5463e09a1bf71b2f16219447fd8fbd57d4e12667
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy:v1.18.8-eksbuild.1
      imageID: docker-pullable://602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy@sha256:71b15b05cdee85a1ff6bdb5bdf9c0788c5089cc72b2f0f41a666c22488670ea4
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-04-26T21:12:27Z"
    hostIP: 192.168.20.112
    phase: Running
    podIP: 192.168.20.112
    podIPs:
    - ip: 192.168.20.112
    qosClass: Burstable
    startTime: "2021-04-26T21:12:20Z"
- metadata:
    annotations:
      kubernetes.io/psp: eks.privileged
    creationTimestamp: "2021-04-26T21:12:12Z"
    generateName: kube-proxy-
    labels:
      controller-revision-hash: 679dd5bcff
      k8s-app: kube-proxy
      pod-template-generation: "1"
    managedFields:
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:generateName: {}
          f:labels:
            .: {}
            f:controller-revision-hash: {}
            f:k8s-app: {}
            f:pod-template-generation: {}
          f:ownerReferences:
            .: {}
            k:{"uid":"75919d99-7581-49ba-aa01-1827d0c57f69"}:
              .: {}
              f:apiVersion: {}
              f:blockOwnerDeletion: {}
              f:controller: {}
              f:kind: {}
              f:name: {}
              f:uid: {}
        f:spec:
          f:affinity:
            .: {}
            f:nodeAffinity:
              .: {}
              f:requiredDuringSchedulingIgnoredDuringExecution:
                .: {}
                f:nodeSelectorTerms: {}
          f:containers:
            k:{"name":"kube-proxy"}:
              .: {}
              f:command: {}
              f:image: {}
              f:imagePullPolicy: {}
              f:name: {}
              f:resources:
                .: {}
                f:requests:
                  .: {}
                  f:cpu: {}
              f:securityContext:
                .: {}
                f:privileged: {}
              f:terminationMessagePath: {}
              f:terminationMessagePolicy: {}
              f:volumeMounts:
                .: {}
                k:{"mountPath":"/lib/modules"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                  f:readOnly: {}
                k:{"mountPath":"/run/xtables.lock"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy-config/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/lib/kube-proxy/"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
                k:{"mountPath":"/var/log"}:
                  .: {}
                  f:mountPath: {}
                  f:name: {}
          f:dnsPolicy: {}
          f:enableServiceLinks: {}
          f:hostNetwork: {}
          f:priorityClassName: {}
          f:restartPolicy: {}
          f:schedulerName: {}
          f:securityContext: {}
          f:serviceAccount: {}
          f:serviceAccountName: {}
          f:terminationGracePeriodSeconds: {}
          f:tolerations: {}
          f:volumes:
            .: {}
            k:{"name":"config"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"kubeconfig"}:
              .: {}
              f:configMap:
                .: {}
                f:defaultMode: {}
                f:name: {}
              f:name: {}
            k:{"name":"lib-modules"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"varlog"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
            k:{"name":"xtables-lock"}:
              .: {}
              f:hostPath:
                .: {}
                f:path: {}
                f:type: {}
              f:name: {}
      manager: kube-controller-manager
      operation: Update
      time: "2021-04-26T21:12:12Z"
    - apiVersion: v1
      fieldsType: FieldsV1
      fieldsV1:
        f:status:
          f:conditions:
            k:{"type":"ContainersReady"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Initialized"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
            k:{"type":"Ready"}:
              .: {}
              f:lastProbeTime: {}
              f:lastTransitionTime: {}
              f:status: {}
              f:type: {}
          f:containerStatuses: {}
          f:hostIP: {}
          f:phase: {}
          f:podIP: {}
          f:podIPs:
            .: {}
            k:{"ip":"192.168.61.111"}:
              .: {}
              f:ip: {}
          f:startTime: {}
      manager: kubelet
      operation: Update
      time: "2021-04-26T21:12:22Z"
    name: kube-proxy-tftsf
    namespace: kube-system
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: DaemonSet
      name: kube-proxy
      uid: 75919d99-7581-49ba-aa01-1827d0c57f69
    resourceVersion: "1580"
    selfLink: /api/v1/namespaces/kube-system/pods/kube-proxy-tftsf
    uid: 47c4c045-22ba-486c-b4a4-b777cb335062
  spec:
    affinity:
      nodeAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          nodeSelectorTerms:
          - matchFields:
            - key: metadata.name
              operator: In
              values:
              - ip-192-168-61-111.us-west-2.compute.internal
    containers:
    - command:
      - kube-proxy
      - --v=2
      - --config=/var/lib/kube-proxy-config/config
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy:v1.18.8-eksbuild.1
      imagePullPolicy: IfNotPresent
      name: kube-proxy
      resources:
        requests:
          cpu: 100m
      securityContext:
        privileged: true
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/log
        name: varlog
      - mountPath: /run/xtables.lock
        name: xtables-lock
      - mountPath: /lib/modules
        name: lib-modules
        readOnly: true
      - mountPath: /var/lib/kube-proxy/
        name: kubeconfig
      - mountPath: /var/lib/kube-proxy-config/
        name: config
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-proxy-token-cclcv
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    hostNetwork: true
    nodeName: ip-192-168-61-111.us-west-2.compute.internal
    priority: 2000001000
    priorityClassName: system-node-critical
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext: {}
    serviceAccount: kube-proxy
    serviceAccountName: kube-proxy
    terminationGracePeriodSeconds: 30
    tolerations:
    - operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/disk-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/memory-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/pid-pressure
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/unschedulable
      operator: Exists
    - effect: NoSchedule
      key: node.kubernetes.io/network-unavailable
      operator: Exists
    volumes:
    - hostPath:
        path: /var/log
        type: ""
      name: varlog
    - hostPath:
        path: /run/xtables.lock
        type: FileOrCreate
      name: xtables-lock
    - hostPath:
        path: /lib/modules
        type: ""
      name: lib-modules
    - configMap:
        defaultMode: 420
        name: kube-proxy
      name: kubeconfig
    - configMap:
        defaultMode: 420
        name: kube-proxy-config
      name: config
    - name: kube-proxy-token-cclcv
      secret:
        defaultMode: 420
        secretName: kube-proxy-token-cclcv
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:16Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:22Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:22Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2021-04-26T21:12:12Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: docker://4efb59de870ead15dde6fdfa88c814d5235c69cf4f7b6c43590775431305496c
      image: 602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy:v1.18.8-eksbuild.1
      imageID: docker-pullable://602401143452.dkr.ecr.us-west-2.amazonaws.com/eks/kube-proxy@sha256:71b15b05cdee85a1ff6bdb5bdf9c0788c5089cc72b2f0f41a666c22488670ea4
      lastState: {}
      name: kube-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2021-04-26T21:12:21Z"
    hostIP: 192.168.61.111
    phase: Running
    podIP: 192.168.61.111
    podIPs:
    - ip: 192.168.61.111
    qosClass: Burstable
    startTime: "2021-04-26T21:12:16Z"
kind: PodList
metadata:
  resourceVersion: "3384881"
  selfLink: /api/v1/namespaces/kube-system/pods
